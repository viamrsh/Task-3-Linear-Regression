
#  Import libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

#  Load the dataset
file_path = '/content/drive/MyDrive/Housing.csv'
df = pd.read_csv(file_path)

#  Basic exploration
print("First 5 rows:\n", df.head())
print("\nSummary statistics:\n", df.describe())
print("\nMissing values:\n", df.isnull().sum())

#  Handle categorical variables
df = pd.get_dummies(df, drop_first=True)

#  Define features and target
X = df.drop('price', axis=1)
y = df['price']

#  Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

#  Train the model
model = LinearRegression()
model.fit(X_train, y_train)

#  Predictions
y_pred = model.predict(X_test)

#  Evaluation
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_test, y_pred)

print("\n Model Evaluation:")
print(f"MAE: {mae:.2f}")
print(f"MSE: {mse:.2f}")
print(f"RMSE: {rmse:.2f}")
print(f"RÂ² Score: {r2:.2f}")

# Coefficients
coefficients = pd.DataFrame(model.coef_, index=X.columns, columns=['Coefficient'])
print("\n Model Coefficients:")
print(coefficients)
print(f"\nIntercept: {model.intercept_:.2f}")

print("\n Interpretation of Coefficients:")
for feature, coef in zip(X.columns, model.coef_):
    print(f"Each 1 unit increase in '{feature}' increases predicted price by {coef:.2f} units.")

#  Plot regression line (only if 1 feature)
if X.shape[1] == 1:
    plt.figure(figsize=(10, 6))
    plt.scatter(X_test.iloc[:, 0], y_test, color='blue', label='Actual Price')
    plt.plot(X_test.iloc[:, 0], y_pred, color='red', linewidth=2, label='Regression Line')
    plt.xlabel(X.columns[0])
    plt.ylabel('Price')
    plt.title('Simple Linear Regression')
    plt.legend()
    plt.grid(True)
    plt.show()
else:
    # Plot actual vs predicted (for multiple regression)
    plt.figure(figsize=(10, 6))
    plt.scatter(y_test, y_pred, alpha=0.6, color='purple')
    plt.xlabel("Actual Price")
    plt.ylabel("Predicted Price")
    plt.title("Actual vs Predicted Price")
    plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], color='red')  # diagonal line
    plt.grid(True)
    plt.show()

    #  Residual plot
    residuals = y_test - y_pred
    plt.figure(figsize=(10, 6))
    sns.histplot(residuals, kde=True, bins=30, color='orange')
    plt.title("Residual Distribution")
    plt.xlabel("Residual (Actual - Predicted)")
    plt.grid(True)
    plt.show()

# Heatmap of correlation
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Feature Correlation Heatmap")
plt.show()
